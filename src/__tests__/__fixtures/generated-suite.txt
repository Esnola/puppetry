
/**
 * Generated by https://github.com/dsheiko/puppetry
 * on Thu Apr 11 2019 10:41:06 GMT+0200 (CEST)
 */
const { bs, png, query } = require( "../lib/bootstrap" )( "Functional--test" ),
      devices = require( "puppeteer" ).devices;

jest.setTimeout( 50000 );

const EMAIL_INPUT = async () => query( "input[name=email]", "EMAIL_INPUT" );
const VAT_INPUT = async () => query( "input[name=vatId]", "VAT_INPUT" );
const FNAME_INPUT = async () => query( "//*[@id=\"firstNameInput\"]", "FNAME_INPUT" );
const DAY_SELECT = async () => query( "[name=day]", "DAY_SELECT" );
const MONTH_SELECT = async () => query( "[name=month]", "MONTH_SELECT" );
const SUBMIT_BTN = async () => query( "button[type=submit]", "SUBMIT_BTN" );
const FORM_EL = async () => query( "form", "FORM_EL" );

describe( "Functional test", async () => {
  beforeEach(async () => {
    await bs.setup();
  });

  afterEach(async () => {
    await bs.teardown();
  });


  describe( "Form submission", async () => {

    test( "reports errors on invalid input", async () => {
      let result, assert;
// @puppetry-command-id=1u2jnyned4o:1u2jnynetdn:1u2jnynf8gn

      // Navigating to "https://dsheiko.github.io/react-html5-form/"
      await bs.page.goto( "https://dsheiko.github.io/react-html5-form/", {"timeout":30000,"waitUntil":"load"} );

// @puppetry-command-id=1u2jnyned4o:1u2jnynetdn:1u2jnyng21t

      // Emulating user input
      await ( await EMAIL_INPUT() ).type( "invalid value" );
// @puppetry-command-id=1u2jnyned4o:1u2jnynetdn:f11jubbp3aj


      // Run custom JavaScript in the test
      undefinedFunc();

// @puppetry-command-id=1u2jnyned4o:1u2jnynetdn:1u2jnyngmdj

      // Emulating user input
      await ( await VAT_INPUT() ).type( "invalid value" );
// @puppetry-command-id=1u2jnyned4o:1u2jnynetdn:f11jubbqfws

      // Asserting that ".sdfgsdfgs" CSS class value exists in SUBMIT_BTN class attribute
      result = await bs.page.$eval( 'button[type=submit]',
        ( el, className ) => el.classList.contains( className ), ".sdfgsdfgs" );
      expect( result ).toBeOk( "SUBMIT_BTN.assertContainsClass" );
// @puppetry-command-id=1u2jnyned4o:1u2jnynetdn:df1jub9yt6i

      // Asserting that "value" property's value of EMAIL_INPUT satisfies the given constraint
      result = await ( await EMAIL_INPUT() ).getProp( "value" );
      expect( result ).toBeEqual( "ASAASDASD", "EMAIL_INPUT.assertProperty" );
// @puppetry-command-id=1u2jnyned4o:1u2jnynetdn:1u2jnynh0y7

      // Emulating user input
      await ( await FNAME_INPUT() ).type( "invalid value" );
// @puppetry-command-id=1u2jnyned4o:1u2jnynetdn:1u2jnynhel5

      // Emulating select
      await bs.page.select( "[name=day]", "..." );
// @puppetry-command-id=1u2jnyned4o:1u2jnynetdn:1u2jnyni5m4

      // Emulating mouse click
      await ( await SUBMIT_BTN() ).click( {"button":"left","clickCount":1,"delay":0} );
// @puppetry-command-id=1u2jnyned4o:1u2jnynetdn:1u2jnynitp8

      // Taking screenshot of the page
      await bs.page.screenshot( png( "invalid form submitted", {"fullPage":false,"omitBackground":false} ) );

// @puppetry-command-id=1u2jnyned4o:1u2jnynetdn:1u2jnynjdse

      // Asserting that EMAIL_INPUT matches ":invalid" selector or pseudo-selector
      result = await bs.page.$eval( 'input[name=email]', ( el, selector ) => el.matches( selector ), ":invalid" );
      expect( result ).toBeOk( "EMAIL_INPUT.assertMatchesSelector" );
// @puppetry-command-id=1u2jnyned4o:1u2jnynetdn:1u2jnynm1b4

      // Asserting that VAT_INPUT matches ":invalid" selector or pseudo-selector
      result = await bs.page.$eval( 'input[name=vatId]', ( el, selector ) => el.matches( selector ), ":invalid" );
      expect( result ).toBeOk( "VAT_INPUT.assertMatchesSelector" );
// @puppetry-command-id=1u2jnyned4o:1u2jnynetdn:mvoju2qrjhy

      // Taking screenshot of the page
      await bs.page.screenshot( png( "before reset", {"fullPage":true,"omitBackground":true} ) );

// @puppetry-command-id=1u2jnyned4o:1u2jnynetdn:mvoju2qr8gd

      // Reset the input or form
      await bs.page.$eval( 'input[name=email]', el => {
        if ( el.tagName === "FORM" ) {
          el.reset();
          return;
        }
        if ( "value" in el ) {
          el.value = "";
        }
      })
// @puppetry-command-id=1u2jnyned4o:1u2jnynetdn:mvoju2qsfnt

      // Taking screenshot of the page
      await bs.page.screenshot( png( "after reset", {"fullPage":true,"omitBackground":true} ) );

// @puppetry-command-id=1u2jnyned4o:1u2jnynetdn:iazju469pq5

      // Asserting that page URL satisfies the given constraint
      result = await bs.page.url();
      expect( result ).toBeEqual( "https://dsheiko.github.io/react-html5-form/", "page.assertUrl" );
// @puppetry-command-id=1u2jnyned4o:1u2jnynetdn:jtyju4906yj

      // Reset the input or form
      await bs.page.$eval( 'input[name=email]', el => {
        if ( el.tagName === "FORM" ) {
          el.reset();
          return;
        }
        if ( "value" in el ) {
          el.value = "";
        }
      })
// @puppetry-command-id=1u2jnyned4o:1u2jnynetdn:jtyju4912l4

      // Reset the input or form
      await bs.page.$eval( 'form', el => {
        if ( el.tagName === "FORM" ) {
          el.reset();
          return;
        }
        if ( "value" in el ) {
          el.value = "";
        }
      })
// @puppetry-command-id=1u2jnyned4o:1u2jnynetdn:jtyju491sht

      // Taking screenshot of the page
      await bs.page.screenshot( png( "reset form", {"fullPage":true,"omitBackground":true} ) );

    });

  });


});

